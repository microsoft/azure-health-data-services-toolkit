parameters:
  - name: PackageArtifactName
  - name: DevOpsFeedID
  - name: IsPrerelease
    type: boolean
    default: true
  - name: PackagePrefix
    default: Microsoft.AzureHealth.DataServices
  - name: RepositoryName
    default: microsoft/azure-health-data-services-toolkit

stages:
  - stage: BuildAndRelease
    jobs:
    - job: BuildJob
    steps:
    - script: |
        sudo apt update
        sudo apt install -y mono-complete
      displayName: 'Install Mono on Ubuntu'
  - stage: ${{ format('Signing_{0}', parameters.PackageArtifactName) }}
    displayName: 'Sign Code & Packages'
    dependsOn: Build
    jobs:
      - deployment: SignPackage
        environment: esrp
        pool:
          vmImage: $(WindowsVmImage)
        strategy:
          runOnce:
            deploy:
              steps:
              - download: current
                artifact: ${{ parameters.PackageArtifactName }}
                timeoutInMinutes: 5
              
              - template: ../steps/package-signing.yml
                parameters:
                  PackagesPath: '$(Pipeline.Workspace)/${{ parameters.PackageArtifactName }}'

              - publish: '$(Pipeline.Workspace)/${{ parameters.PackageArtifactName }}-signed'
                artifact: '${{ parameters.PackageArtifactName }}-signed'
                displayName: 'Store signed packages in ${{ parameters.PackageArtifactName }}-signed artifact'

  - stage: ${{ format('AnalyzeCode_{0}', parameters.PackageArtifactName) }}
    ${{ if eq( parameters['IsPrerelease'], true) }}:
      displayName: 'Analyze Prerelease Code'
    ${{ else }}:
      displayName: 'Analyze Release Code'
    dependsOn: Build
    jobs:
      - job: Guardian
        pool:
          vmImage: $(WindowsVmImage)
        steps:
        - template: ../steps/analyze.yml
          parameters:
            PackageArtifactName: ${{ parameters.PackageArtifactName }}

  - stage: ${{ format('ReleaseInternal_{0}', parameters.PackageArtifactName) }}
    ${{ if eq( parameters['IsPrerelease'], true) }}:
      displayName: 'Prerelease Internal Package Publish'
    ${{ else }}:
      displayName: 'Release Internal Package Publish'
    dependsOn:
      - ${{ format('Signing_{0}', parameters.PackageArtifactName) }}
      - ${{ format('AnalyzeCode_{0}', parameters.PackageArtifactName) }}
    jobs:
    - deployment: PublishPackageDevOps
      displayName: 'Publish packages to DevOps Feed'
      environment: nuget-internal
      pool:
        vmImage: $(VmImage)

      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: '${{ parameters.PackageArtifactName }}-signed'

            - template: ../steps/package-push-internal.yml
              parameters:
                ArtifactPath: '$(Pipeline.Workspace)/${{ parameters.PackageArtifactName }}-signed'
                PackageName: ${{ parameters.PackagePrefix }}
                DevOpsFeedID: ${{ parameters.DevOpsFeedID }}

  # Add integration tests here

  - stage: ${{ format('ReleaseGithubNuget_{0}', parameters.PackageArtifactName) }}
    ${{ if eq( parameters['IsPrerelease'], true) }}:
      displayName: 'GitHub/Nuget Pre-Release Publish'
    ${{ else }}:
      displayName: 'GitHub/Nuget Release Publish'
    dependsOn: ${{ format('ReleaseInternal_{0}', parameters.PackageArtifactName) }}
    jobs:
    - deployment: PublishPackageNuGet
      ${{ if eq( parameters['IsPrerelease'], true) }}:
        displayName: 'Publish Nuget Prerelease'
      ${{ else }}:
        displayName: 'Publish NuGet Release'
      environment: nuget
      pool:
        vmImage: $(VmImage)

      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: '${{ parameters.PackageArtifactName }}-signed'

            - template: ../steps/package-push-nuget.yml
              parameters:
                ArtifactPath: '$(Pipeline.Workspace)/${{ parameters.PackageArtifactName }}-signed'
                PackageName: ${{ parameters.PackagePrefix }}

    - deployment: GithubRelease
      ${{ if eq( parameters['IsPrerelease'], true) }}:
        displayName: 'Create GitHub Release (Prerelease)'
      ${{ else }}:
        displayName: 'Create GitHub Release (Release)'
      dependsOn: 'PublishPackageNuGet'
      environment: github
      pool:
        vmImage: $(VmImage)
      variables:
        ${{ if eq( parameters['IsPrerelease'], true) }}:
          PackageVersion: $(SetVariables.PrereleaseVersion)
        ${{ else }}:
          PackageVersion: $(SetVariables.ReleaseVersion)
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: '${{ parameters.PackageArtifactName }}-signed'

            - template: ../steps/versionVariables.yml

            - task: GithubRelease@1 
              displayName: 'Create GitHub Release'
              inputs:
                gitHubConnection: 'Github (${{ parameters.RepositoryName }})'
                repositoryName: ${{ parameters.RepositoryName }}
                action: 'create'
                tagSource: userSpecifiedTag
                
                tag: release/$(PackageVersion)
                title: ${{ parameters.PackagePrefix }} $(PackageVersion)
                isPreRelease: ${{ parameters.IsPrerelease }}
                assets: |
                  $(Pipeline.Workspace)/${{ parameters.PackageArtifactName }}-signed/*.nupkg
                  $(Pipeline.Workspace)/${{ parameters.PackageArtifactName }}-signed/*.snupkg